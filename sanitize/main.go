package main

import (
	"bytes"
	"fmt"
)

// func main() {
// 	// Do this once for each unique policy, and use the policy for the life of the program
// 	// Policy creation/editing is not safe to use in multiple goroutines
// 	p := bluemonday.NewPolicy()

// 	p.AllowAttrs("viewBox").OnElements("svg")
// 	p.AllowAttrs("version").OnElements("svg")
// 	p.AllowAttrs("xmlns").OnElements("svg")
// 	p.AllowAttrs("xmlns:xlink").OnElements("svg")
// 	p.AllowElements("svg")

// 	// The policy can then be used to sanitize lots of input and it is safe to use the policy in multiple goroutines
// 	html := p.Sanitize(
// 		`<?xml version="1.0" standalone="no"?> <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke-linecap="round" stroke-linejoin="round" fill-rule="evenodd" xml:space="preserve"> <metadata> <dimension> <minPoint x="-25509.177551" y="-26956.747669" z="0.000000"/> <maxPoint x="126808.673746" y="136871.226284" z="0.000000"/> </dimension> </metadata> </svg>`,
// 	)

// 	// Output:
// 	// <a href="http://www.google.com" rel="nofollow">Google</a>
// 	fmt.Println(html)
// }

func main() {

	//</metadata>
	meta := []byte{60, 47, 109, 101, 116, 97, 100, 97, 116, 97, 62}
	// fmt.Println(string(meta))

	//bt := []byte{60 63 120 109 108 32 118 101 114 115 105 111 110 61 34 49 46 48 34 32 115 116 97 110 100 97 108 111 110 101 61 34 110 111 34 63 62 10 60 115 118 103 32 118 105 101 119 66 111 120 61 34}
	// fmt.Println(bt)

	//	ft := []byte{60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 115, 116, 97, 110, 100, 97, 108, 111, 110, 101, 61, 34, 110, 111, 34, 63, 62, 10, 60}

	bt := []byte{60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 115, 116, 97, 110, 100, 97, 108, 111, 110, 101, 61, 34, 110, 111, 34, 63, 62, 10, 60, 115, 118, 103, 32, 118, 105, 101, 119, 66, 111, 120, 61, 34, 48, 32, 48, 32, 49, 48, 50, 52, 32, 49, 48, 50, 52, 34, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 49, 34, 32, 120, 109, 108, 110, 115, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 50, 48, 48, 48, 47, 115, 118, 103, 34, 32, 120, 109, 108, 110, 115, 58, 120, 108, 105, 110, 107, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 120, 108, 105, 110, 107, 34, 32, 115, 116, 114, 111, 107, 101, 45, 108, 105, 110, 101, 99, 97, 112, 61, 34, 114, 111, 117, 110, 100, 34, 32, 115, 116, 114, 111, 107, 101, 45, 108, 105, 110, 101, 106, 111, 105, 110, 61, 34, 114, 111, 117, 110, 100, 34, 32, 102, 105, 108, 108, 45, 114, 117, 108, 101, 61, 34, 101, 118, 101, 110, 111, 100, 100, 34, 32, 120, 109, 108, 58, 115, 112, 97, 99, 101, 61, 34, 112, 114, 101, 115, 101, 114, 118, 101, 34, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 100, 97, 116, 97, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 108, 105, 112, 73, 100, 48, 41, 34, 32, 102, 105, 108, 108, 61, 34, 110, 111, 110, 101, 34, 32, 115, 116, 114, 111, 107, 101, 61, 34, 114, 103, 98, 40, 48, 44, 48, 44, 48, 41, 34, 32, 115, 116, 114, 111, 107, 101, 45, 119, 105, 100, 116, 104, 61, 34, 48, 46, 49, 53, 34, 47, 62, 10, 60, 47, 109, 101, 116, 97, 100, 97, 116, 97, 62, 60, 47, 115, 118, 103, 62}
	//	 60 100 105 109 101 110 115 105 111 110 62 10 32 32 32 32 32 32 32 32 32 32 32 32 60 109 105 110 80 111 105 110 116 32 120 61 34 49 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 46 48 48 48 48 48 48 34 32 121 61 34 49 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 46 48 48 48 48 48 48 34 32 122 61 34 49 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 46 48 48 48 48 48 48 34 47 62 10 32 32 32 32 32 32 32 32 32 32 32 32 60 109 97 120 80 111 105 110 116 32 120 61 34 45 49 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 46 48 48 48 48 48 48 34 32 121 61 34 45 49 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 46 48 48 48 48 48 48 34 32 122 61 34 45 49 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 46 48 48 48 48 48 48 34 47 62 10 32 32 32 32 32 32 32 32 60 47 100 105 109 101 110 115 105 111 110 62 10 32 32 32 32 60 47 109 101 116 97 100 97 116 97 62 10 32 32 32 32 60 100 101 102 115 62 10 32 32 32 32 32 32 32 32 60 99 108 105 112 80 97 116 104 32 105 100 61 34 99 108 105 112 73 100 48 34 62 10 32 32 32 32 32 32 32 32 32 32 32 32 60 112 97 116 104 32 100 61 34 77 48 44 49 48 50 52 32 49 48 50 52 44 49 48 50 52 32 49 48 50 52 44 48 32 48 44 48 32 122 34 47 62 10 32 32 32 32 32 32 32 32 60 47 99 108 105 112 80 97 116 104 62 10 32 32 32 32 60 47 100 101 102 115 62 10 32 32 32 32 60 103 32 99 108 105 112 45 112 97 116 104 61 34 117 114 108 40 35,99,108,105,112,73,100,48,41,34,32,102,105,108,108,61,34,110,111,110,101,34,32,115,116,114,111,107,101,61,34,114,103,98,40,48,44,48,44,48,41,34,32,115,116,114,111,107,101,45,119,105,100,116,104,61,34,48,46,49,53,34,47,62,10,60,47,115,118,103,62,10}

	//<?xml version="1.0" standalone="no"?> <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke-linecap="round" stroke-linejoin="round" fill-rule="evenodd" xml:space="preserve">
	//<metadata>
	//clipId0)" fill="none" stroke="rgb(0,0,0)" stroke-width="0.15"/>
	//</svg>

	begin := []byte{60, 115, 118, 103}
	fmt.Println(string(begin))

	index := bytes.Index(bt, meta)

	// st := remove(bt, index-1)
	// fmt.Println(string(st))
	fmt.Println(string(bt))
	fmt.Println("-----------------------------------------------------")

	// index2 := bytes.Index(st, []byte{62})

	// fmt.Println(index2)

	st := removeFrom(bt, index+len(meta))
	fmt.Println(string(st))

	// fmt.Println("-----------------------------------------------------")

	// fmt.Println(string(bt))

	// end := []byte{115, 118, 103, 62}
	// st := remove(bt, 246)
	// st := remove(bt, 37)
	// fmt.Println("-----------------------------------------------------")
	// fmt.Println(string(begin))
	// fmt.Println(string(end))
	// nst := removeEnd(st, 7)
	// fmt.Println("-----------------------------------------------------")
	// fmt.Println(string(nst))
}

func remove(slice []byte, s int) []byte {
	length := len(slice)
	if length > s {
		return slice[s+1:]
	}
	return slice
}

func removeFrom(slice []byte, s int) []byte {
	length := len(slice)
	if length > s {
		return slice[:s+1]
	}
	return slice
}

func removeEnd(slice []byte, s int) []byte {
	length := len(slice)
	if length > s {
		return slice[:len(slice)-s]
	}
	return slice
}
